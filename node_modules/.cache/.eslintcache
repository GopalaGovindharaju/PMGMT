[{"D:\\Mini Project\\Project Management APP\\frontend\\src\\index.js":"1","D:\\Mini Project\\Project Management APP\\frontend\\src\\App.js":"2","D:\\Mini Project\\Project Management APP\\frontend\\src\\reportWebVitals.js":"3","D:\\Mini Project\\Project Management APP\\frontend\\src\\Signup\\Signin.js":"4","D:\\Mini Project\\Project Management APP\\frontend\\src\\AdminModule\\Admin.js":"5","D:\\Mini Project\\Project Management APP\\frontend\\src\\StudentModule\\Student.js":"6","D:\\Mini Project\\Project Management APP\\frontend\\src\\StaffModule\\Staff.js":"7","D:\\Mini Project\\Project Management APP\\frontend\\src\\StudentModule\\Dashboard.js":"8","D:\\Mini Project\\Project Management APP\\frontend\\src\\StudentModule\\ProjectDetail.js":"9","D:\\Mini Project\\Project Management APP\\frontend\\src\\UsenInfoContext.js":"10","D:\\Mini Project\\Project Management APP\\frontend\\src\\StudentModule\\Main.js":"11","D:\\Project-MGMT-master\\src\\index.js":"12","D:\\Project-MGMT-master\\src\\App.js":"13","D:\\Project-MGMT-master\\src\\reportWebVitals.js":"14","D:\\Project-MGMT-master\\src\\UsenInfoContext.js":"15","D:\\Project-MGMT-master\\src\\StaffModule\\Staff.js":"16","D:\\Project-MGMT-master\\src\\StudentModule\\Student.js":"17","D:\\Project-MGMT-master\\src\\AdminModule\\Admin.js":"18","D:\\Project-MGMT-master\\src\\Signup\\Signin.js":"19","D:\\Project-MGMT-master\\src\\StudentModule\\Main.js":"20","D:\\Project-MGMT-master\\src\\StudentModule\\Dashboard.js":"21","D:\\Project-MGMT-master\\src\\StudentModule\\ProjectDetail.js":"22"},{"size":669,"mtime":1696344171542,"results":"23","hashOfConfig":"24"},{"size":1016,"mtime":1697446702644,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1696228202118,"results":"26","hashOfConfig":"24"},{"size":12213,"mtime":1698652439738,"results":"27","hashOfConfig":"24"},{"size":10244,"mtime":1698848701802,"results":"28","hashOfConfig":"24"},{"size":587,"mtime":1697548610403,"results":"29","hashOfConfig":"24"},{"size":10645,"mtime":1698848686483,"results":"30","hashOfConfig":"24"},{"size":4448,"mtime":1697289536874,"results":"31","hashOfConfig":"24"},{"size":2242,"mtime":1697125597461,"results":"32","hashOfConfig":"24"},{"size":121,"mtime":1697446891978,"results":"33","hashOfConfig":"24"},{"size":18687,"mtime":1698848619018,"results":"34","hashOfConfig":"24"},{"size":669,"mtime":1698848840000,"results":"35","hashOfConfig":"36"},{"size":1016,"mtime":1698848840000,"results":"37","hashOfConfig":"36"},{"size":362,"mtime":1698848840000,"results":"38","hashOfConfig":"36"},{"size":121,"mtime":1698848840000,"results":"39","hashOfConfig":"36"},{"size":10645,"mtime":1698848840000,"results":"40","hashOfConfig":"36"},{"size":587,"mtime":1698848840000,"results":"41","hashOfConfig":"36"},{"size":10244,"mtime":1698848840000,"results":"42","hashOfConfig":"36"},{"size":12213,"mtime":1698848840000,"results":"43","hashOfConfig":"36"},{"size":18687,"mtime":1698848840000,"results":"44","hashOfConfig":"36"},{"size":4448,"mtime":1698848840000,"results":"45","hashOfConfig":"36"},{"size":2242,"mtime":1698848840000,"results":"46","hashOfConfig":"36"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1t3vtg0",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"64hoz1",{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Mini Project\\Project Management APP\\frontend\\src\\index.js",[],[],["118"],"D:\\Mini Project\\Project Management APP\\frontend\\src\\App.js",[],[],"D:\\Mini Project\\Project Management APP\\frontend\\src\\reportWebVitals.js",[],[],"D:\\Mini Project\\Project Management APP\\frontend\\src\\Signup\\Signin.js",[],["119","120"],"D:\\Mini Project\\Project Management APP\\frontend\\src\\AdminModule\\Admin.js",["121","122"],[],"D:\\Mini Project\\Project Management APP\\frontend\\src\\StudentModule\\Student.js",["123","124","125"],[],"D:\\Mini Project\\Project Management APP\\frontend\\src\\StaffModule\\Staff.js",["126","127","128","129"],[],"D:\\Mini Project\\Project Management APP\\frontend\\src\\StudentModule\\Dashboard.js",[],[],"D:\\Mini Project\\Project Management APP\\frontend\\src\\StudentModule\\ProjectDetail.js",[],[],"D:\\Mini Project\\Project Management APP\\frontend\\src\\UsenInfoContext.js",[],[],"D:\\Mini Project\\Project Management APP\\frontend\\src\\StudentModule\\Main.js",["130"],[],"D:\\Project-MGMT-master\\src\\index.js",[],[],"D:\\Project-MGMT-master\\src\\App.js",[],[],"D:\\Project-MGMT-master\\src\\reportWebVitals.js",[],[],"D:\\Project-MGMT-master\\src\\UsenInfoContext.js",[],[],"D:\\Project-MGMT-master\\src\\StaffModule\\Staff.js",["131","132","133","134"],[],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport UserInfoContext from '../UsenInfoContext';\r\nimport './staff.css'\r\n\r\nfunction Staff() {\r\n  const [isAddingGuide, setIsAddingGuide] = useState(false);\r\n  const [studentName, setStudentName] = useState('');\r\n  const [studentRegNo, setStudentRegNo] = useState('');\r\n  const [guideList, setGuideList] = useState([]);\r\n  const [selectedBatchNo, setSelectedBatchNo] = useState('');\r\n\r\n  const openGuidePopup = () => {\r\n    setIsAddingGuide(true);\r\n  };\r\n\r\n  const closeGuidePopup = () => {\r\n    setIsAddingGuide(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(userInfo.Name)\r\n    axios.post('http://localhost:8000/allteams/batch/',{'guide_name': userInfo.Name})\r\n      .then(response => {\r\n        setGuideList(response.data.Batch_No);\r\n        console.log(response.data.Batch_No)\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching guide list:', error);\r\n      });\r\n  }, []);\r\n  \r\n\r\n  const handleStudentSubmission = () => {\r\n    // Perform axios request to add the new guide\r\n    const data = {\r\n      Name: studentName,\r\n      Reg_No: studentRegNo,\r\n      Project_Guide: userInfo.Name,\r\n    }\r\n    console.log(data)\r\n    axios.post('http://localhost:8000/student/add/', data)\r\n      .then(response => {\r\n        // Handle success, e.g., close the modal and refresh data\r\n        closeGuidePopup();\r\n        // You might want to fetch data again to update the projects list\r\n      })\r\n      .catch(error => {\r\n        alert('Error adding guide:', error);\r\n        closeGuidePopup();\r\n      });\r\n  };\r\n\r\n  const [projects, setProjects] = useState([]);\r\n\r\n  const { userInfo } = useContext(UserInfoContext);\r\n\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  \r\n\r\n  const handleTheme = () => {\r\n    document.documentElement.classList.toggle('dark');\r\n    setIsDarkMode((prevMode) => !prevMode);\r\n\r\n  }\r\n  const colorPairs = [\r\n    { backgroundColor: '#e9e7fd', textColor: '#4f3ff0' },\r\n    { backgroundColor: '#ffd3e2', textColor: '#df3670' },\r\n    { backgroundColor: '#c8f7dc', textColor: '#34c471' },\r\n    { backgroundColor: '#fee4cb', textColor: '#ff942e' },\r\n    { backgroundColor: '', textColor: '#096c86' },\r\n  \r\n  ];\r\n\r\n  const handleStudentName = (e) => {\r\n    setStudentName(e.target.value)\r\n  }\r\n  const handleStudentRegNo = (e) => {\r\n    setStudentRegNo(e.target.value)\r\n  }\r\n\r\n  const colorLoop = projects.map((project, index) => {\r\n    const colorPair = colorPairs[index % colorPairs.length];\r\n    return { ...project, ...colorPair};\r\n  });\r\n\r\n  \r\n  const [currentDate, setCurrentDate] = useState('');\r\n\r\n  useEffect(() => {\r\n    const apiUrl = selectedBatchNo\r\n    ? `http://localhost:8000/allteams/bat/?batch=${selectedBatchNo}&name=${userInfo.Name}`\r\n    : `http://localhost:8000/allteams/bat/?name=${userInfo.Name}`;\r\n\r\n    const postData = {\r\n      User_Id: userInfo.User_Id, // Replace with the actual user id\r\n      // Other data you want to send...\r\n    };\r\n\r\n  axios.get(apiUrl, postData)\r\n    .then(response => {\r\n      setProjects(response.data);\r\n      console.log(response.data)\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching project data:', error);\r\n    });\r\n\r\n    const formatDate = (date) => {\r\n      const options = { month: 'long', day: 'numeric' };\r\n      return new Intl.DateTimeFormat('en-US', options).format(date);\r\n    };\r\n    const today = new Date();\r\n    const formattedDate = formatDate(today);\r\n    setCurrentDate(formattedDate);\r\n  }, [selectedBatchNo]);\r\n\r\n\r\n\r\n  const isauthorized = localStorage.getItem(\"isauthorized\");\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    if (isauthorized !== \"staff\") {\r\n      navigate(\"/\");\r\n    }\r\n  }, []);\r\n  const handleLogout = (event) => {\r\n    localStorage.setItem(\"isSigned\", \"false\");\r\n    localStorage.setItem(\"isauthorized\", \"\");\r\n    navigate(\"/\");\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"app-container\">\r\n  <div className=\"app-header\">\r\n    <div className=\"app-header-left\">\r\n      <span className=\"app-icon\"></span>\r\n      <p className=\"app-name\">MGMT</p>\r\n      <select\r\n  className=\"form-select\"\r\n  value={selectedBatchNo}\r\n  onChange={(e) => setSelectedBatchNo(e.target.value)}\r\n  aria-label=\"Default select example\"\r\n>\r\n  <option value=\"\" defaultValue>\r\n    Filter By Batch Number\r\n  </option>\r\n  {guideList.map((guide, index) => (\r\n    <option key={index} value={guide}>\r\n      {guide}\r\n    </option>\r\n  ))}\r\n</select>\r\n    </div>\r\n    <div className=\"app-header-right\">\r\n    <button className=\"add-btn\" title=\"New Student\" value=\"New Guide\" onClick={openGuidePopup}>\r\n      <img\r\n          src={process.env.PUBLIC_URL + '/add.png'}\r\n          alt=\"External Icon\"\r\n          width=\"22\"\r\n          height=\"22\"\r\n        />\r\n      </button>\r\n      {isAddingGuide && (\r\n        <div className=\"guide-popup\">\r\n          <div className=\"guide-popup-content\">\r\n            <h2>Add a New Student</h2>\r\n            <form>\r\n            <div className=\"form-group row\">\r\n    <label htmlFor=\"inputPassword\" className=\"col-sm-4 col-form-label\">Project title</label>\r\n    <div className=\"col-sm-8\">\r\n      <input type=\"text\" value={studentName} className=\"form-control\" onChange={handleStudentName} id=\"inputPassword\" placeholder=\"Title\"/>\r\n    </div>\r\n  </div>\r\n  <div className=\"form-group row\">\r\n    <label htmlFor=\"inputPassword\" className=\"col-sm-4 col-form-label\">Team Lead RegNo</label>\r\n    <div className=\"col-sm-8\">\r\n      <input type=\"text\" value={studentRegNo} className=\"form-control\" id=\"inputPassword\" onChange={handleStudentRegNo} placeholder=\"RegNo\"/>\r\n    </div>\r\n  </div>\r\n  <button type=\"button\" style={{marginTop:\"10px\"}} className=\"btn btn-primary\" onClick={handleStudentSubmission}>Add</button>\r\n<button type=\"button\" style={{marginTop:\"10px\"}} className=\"btn btn-primary\" onClick={closeGuidePopup}>Cancel</button>\r\n</form>\r\n\r\n          </div>\r\n        </div>\r\n      )}\r\n      <button title=\"Switch Theme\" className={`mode-switch ${isDarkMode ? 'active' : ''}`} onClick={handleTheme}>\r\n        <svg className=\"moon\" fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n          <defs></defs>\r\n          <path d=\"M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z\"></path>\r\n        </svg>\r\n      </button>\r\n      <button className=\"add-btn\" title=\"Log Out\" value=\"Log Out\" onClick={handleLogout}>\r\n      <img\r\n          src={process.env.PUBLIC_URL + '/power.png'}\r\n          alt=\"External Icon\"\r\n          width=\"22\"\r\n          height=\"22\"\r\n        />\r\n      </button>\r\n      <button className=\"profile-btn\">\r\n        <img src={process.env.PUBLIC_URL + '/profile.png'} />\r\n        <span>{userInfo.Name}</span>\r\n      </button>\r\n    </div>\r\n    <button className=\"messages-btn\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-message-circle\">\r\n        <path d=\"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z\" /></svg>\r\n    </button>\r\n  </div>\r\n  <div className=\"app-content\">\r\n    <div className=\"app-sidebar\">\r\n    </div>\r\n    <div className=\"projects-section container-fluid\">\r\n      <div className=\"projects-section-header\">\r\n        <p>Projects</p>\r\n        <p className=\"time\">{currentDate}</p>\r\n      </div>\r\n      <div className=\"projects-section-line\">\r\n        <div className=\"projects-status\">\r\n          <div className=\"item-status\">\r\n            <span className=\"status-number\">45</span>\r\n            <span className=\"status-type\">In Progress</span>\r\n          </div>\r\n          <div className=\"item-status\">\r\n            <span className=\"status-number\">24</span>\r\n            <span className=\"status-type\">Upcoming</span>\r\n          </div>\r\n          <div className=\"item-status\">\r\n            <span className=\"status-number\">62</span>\r\n            <span className=\"status-type\">Total Projects</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"overflow-auto\" id='project-boxes'>\r\n      {colorLoop.map((project) => (\r\n            <div className=\"project-box-wrapper\" key={project.lead_RegNo} onClick={() => navigate(`/student?leadRegNo=${project.lead_RegNo}`)}>\r\n              <div className=\"project-box\" style={{ backgroundColor: project.backgroundColor }}>\r\n                    <div className=\"project-box-header\">\r\n                      <span>{currentDate}</span>\r\n                      <div className=\"more-wrapper\">\r\n                      <button className=\"project-btn-more\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-more-vertical\">\r\n                <circle cx=\"12\" cy=\"12\" r=\"1\" />\r\n                <circle cx=\"12\" cy=\"5\" r=\"1\" />\r\n                <circle cx=\"12\" cy=\"19\" r=\"1\" /></svg>\r\n            </button>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"project-box-content-header\">\r\n                      <p className=\"box-content-header\">{project.Title}</p>\r\n                    </div>\r\n                    <div className=\"box-progress-wrapper\">\r\n                      <p className=\"box-progress-header\">Progress</p>\r\n                      <div className=\"box-progress-bar\">\r\n                        <span\r\n                          className=\"box-progress\"\r\n                          style={{ width: `${Math.round(project.Review)}%`, backgroundColor: project.textColor }}\r\n                        ></span>\r\n                      </div>\r\n                      <p className=\"box-progress-percentage\">{Math.round(project.Review)}%</p>\r\n                    </div>\r\n                    <div className=\"project-box-footer\">\r\n                      <div className=\"participants\">\r\n                      <p className=\"box-content-subheader\">{project.Project_Guide}</p>\r\n                      </div>\r\n                      <div className=\"days-left\" style={{color: project.textColor }}>\r\n                        {project.Batch_No}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n\r\n\r\n\r\n  </div>\r\n</div>{/*\r\n<Message/>\r\n*/}\r\n</div>\r\n</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Staff\r\n","D:\\Project-MGMT-master\\src\\StudentModule\\Student.js",["135","136","137"],[],"import React, { useEffect } from 'react'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Dashboard from './Dashboard';\r\nimport ProjectDetail from './ProjectDetail';\r\nimport './studen.css';\r\nimport Main from './Main'; \r\nfunction Student() {\r\n  const isauthorized = localStorage.getItem(\"isauthorized\");\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    if (isauthorized !== \"student\" && isauthorized !== \"staff\" && isauthorized !== \"admin\") {\r\n      navigate(\"/\");\r\n    }\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Main/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Student\r\n","D:\\Project-MGMT-master\\src\\AdminModule\\Admin.js",["138","139"],[],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './style.css';\r\nimport UserInfoContext from '../UsenInfoContext';\r\nimport axios from 'axios';\r\n\r\n\r\nfunction Admin() {\r\n\r\n  const [isAddingGuide, setIsAddingGuide] = useState(false);\r\n  const [guideName, setGuideName] = useState('');\r\n  const [guideRegNo, setGuideRegNo] = useState('');\r\n  const [guideList, setGuideList] = useState([]);\r\n  const [selectedGuide, setSelectedGuide] = useState('');\r\n\r\n  const openGuidePopup = () => {\r\n    setIsAddingGuide(true);\r\n  };\r\n\r\n  const closeGuidePopup = () => {\r\n    setIsAddingGuide(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:8000/guide/getlist/')\r\n      .then(response => {\r\n        setGuideList(response.data.Names);\r\n        console.log(response.data.Names)\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching guide list:', error);\r\n      });\r\n  }, []);\r\n  \r\n\r\n  const handleGuideSubmission = () => {\r\n    // Perform axios request to add the new guide\r\n    const data = {\r\n      Name: guideName,\r\n      Reg_No: guideRegNo,\r\n    }\r\n    console.log(data)\r\n    axios.post('http://localhost:8000/guide/add/', data)\r\n      .then(response => {\r\n        // Handle success, e.g., close the modal and refresh data\r\n        closeGuidePopup();\r\n        // You might want to fetch data again to update the projects list\r\n      })\r\n      .catch(error => {\r\n        alert('Error adding guide:', error);\r\n        closeGuidePopup();\r\n      });\r\n  };\r\n\r\n  const [projects, setProjects] = useState([]);\r\n\r\n  const { userInfo } = useContext(UserInfoContext);\r\n\r\n  const [isDarkMode, setIsDarkMode] = useState(false);\r\n  \r\n\r\n  const handleTheme = () => {\r\n    document.documentElement.classList.toggle('dark');\r\n    setIsDarkMode((prevMode) => !prevMode);\r\n\r\n  }\r\n  const colorPairs = [\r\n    { backgroundColor: '#e9e7fd', textColor: '#4f3ff0' },\r\n    { backgroundColor: '#ffd3e2', textColor: '#df3670' },\r\n    { backgroundColor: '#c8f7dc', textColor: '#34c471' },\r\n    { backgroundColor: '#fee4cb', textColor: '#ff942e' },\r\n    { backgroundColor: '', textColor: '#096c86' },\r\n  \r\n  ];\r\n\r\n  const handleGuideName = (e) => {\r\n    setGuideName(e.target.value)\r\n  }\r\n  const handleGuideRegNo = (e) => {\r\n    setGuideRegNo(e.target.value)\r\n  }\r\n\r\n  const colorLoop = projects.map((project, index) => {\r\n    const colorPair = colorPairs[index % colorPairs.length];\r\n    \r\n    return { ...project, ...colorPair };\r\n  });\r\n\r\n  \r\n  const [currentDate, setCurrentDate] = useState('');\r\n\r\n  useEffect(() => {\r\n    const apiUrl = selectedGuide\r\n    ? `http://localhost:8000/allteams/?guide=${selectedGuide}`\r\n    : 'http://localhost:8000/allteams/';\r\n\r\n  axios.get(apiUrl)\r\n    .then(response => {\r\n      setProjects(response.data);\r\n      console.log(\"project\")\r\n      console.log(response.data)\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching project data:', error);\r\n    });\r\n\r\n    const formatDate = (date) => {\r\n      const options = { month: 'long', day: 'numeric' };\r\n      return new Intl.DateTimeFormat('en-US', options).format(date);\r\n    };\r\n    const today = new Date();\r\n    const formattedDate = formatDate(today);\r\n    setCurrentDate(formattedDate);\r\n  }, [selectedGuide]);\r\n \r\n  const isauthorized = localStorage.getItem(\"isauthorized\");\r\n  const navigate = useNavigate();\r\n  useEffect(() => {\r\n    if (isauthorized !== \"admin\") {\r\n      navigate(\"/\");\r\n    }\r\n  }, []);\r\n  const handleLogout = (event) => {\r\n    localStorage.setItem(\"isSigned\", \"false\");\r\n    localStorage.setItem(\"isauthorized\", \"\");\r\n    navigate(\"/\");\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <div className=\"app-container\">\r\n  <div className=\"app-header\">\r\n    <div className=\"app-header-left\">\r\n      <span className=\"app-icon\"></span>\r\n      <p className=\"app-name\">MGMT</p>\r\n      <select\r\n  className=\"form-select\"\r\n  value={selectedGuide}\r\n  onChange={(e) => setSelectedGuide(e.target.value)}\r\n  aria-label=\"Default select example\"\r\n>\r\n  <option value=\"\" defaultValue>\r\n    Filter By Guide\r\n  </option>\r\n  {guideList.map((guide, index) => (\r\n    <option key={index} value={guide}>\r\n      {guide}\r\n    </option>\r\n  ))}\r\n</select>\r\n    </div>\r\n    <div className=\"app-header-right\">\r\n    <button className=\"add-btn\" title=\"New Guide\" value=\"New Guide\" onClick={openGuidePopup}>\r\n      <img\r\n          src={process.env.PUBLIC_URL + '/add.png'}\r\n          alt=\"External Icon\"\r\n          width=\"22\"\r\n          height=\"22\"\r\n        />\r\n      </button>\r\n      {isAddingGuide && (\r\n        <div className=\"guide-popup\">\r\n          <div className=\"guide-popup-content\">\r\n            <h2>Add a New Guide</h2>\r\n            <form>\r\n            <div className=\"form-group row\">\r\n    <label htmlFor=\"inputPassword\" className=\"col-sm-2 col-form-label\">Name</label>\r\n    <div className=\"col-sm-10\">\r\n      <input type=\"text\" value={guideName} className=\"form-control\" onChange={handleGuideName} id=\"inputPassword\" placeholder=\"Name\"/>\r\n    </div>\r\n  </div>\r\n  <div className=\"form-group row\">\r\n    <label htmlFor=\"inputPassword\" className=\"col-sm-2 col-form-label\">RegNo</label>\r\n    <div className=\"col-sm-10\">\r\n      <input type=\"text\" value={guideRegNo} className=\"form-control\" id=\"inputPassword\" onChange={handleGuideRegNo} placeholder=\"RegNo\"/>\r\n    </div>\r\n  </div>\r\n  <button type=\"button\" className=\"btn btn-primary\" onClick={handleGuideSubmission}>Add</button>\r\n<button type=\"button\" className=\"btn btn-primary\" onClick={closeGuidePopup}>Cancel</button>\r\n</form>\r\n\r\n          </div>\r\n        </div>\r\n      )}\r\n      <button title=\"Switch Theme\" className={`mode-switch ${isDarkMode ? 'active' : ''}`} onClick={handleTheme}>\r\n        <svg className=\"moon\" fill=\"none\" stroke=\"currentColor\" strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n          <defs></defs>\r\n          <path d=\"M21 12.79A9 9 0 1111.21 3 7 7 0 0021 12.79z\"></path>\r\n        </svg>\r\n      </button>\r\n      <button className=\"add-btn\" title=\"Log Out\" value=\"Log Out\" onClick={handleLogout}>\r\n      <img\r\n          src={process.env.PUBLIC_URL + '/power.png'}\r\n          alt=\"External Icon\"\r\n          width=\"22\"\r\n          height=\"22\"\r\n        />\r\n      </button>\r\n      <button className=\"profile-btn\">\r\n        <img src={process.env.PUBLIC_URL + '/profile.png'} />\r\n        <span>{userInfo.Name}</span>\r\n      </button>\r\n    </div>\r\n    <button className=\"messages-btn\">\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-message-circle\">\r\n        <path d=\"M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z\" /></svg>\r\n    </button>\r\n  </div>\r\n  <div className=\"app-content\">\r\n    <div className=\"app-sidebar\">\r\n    </div>\r\n    <div className=\"projects-section container-fluid\">\r\n      <div className=\"projects-section-header\">\r\n        <p>Projects</p>\r\n        <p className=\"time\">{currentDate}</p>\r\n      </div>\r\n      <div className=\"projects-section-line\">\r\n        <div className=\"projects-status\">\r\n          <div className=\"item-status\">\r\n            <span className=\"status-number\">45</span>\r\n            <span className=\"status-type\">In Progress</span>\r\n          </div>\r\n          <div className=\"item-status\">\r\n            <span className=\"status-number\">24</span>\r\n            <span className=\"status-type\">Upcoming</span>\r\n          </div>\r\n          <div className=\"item-status\">\r\n            <span className=\"status-number\">62</span>\r\n            <span className=\"status-type\">Total Projects</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"overflow-auto\" id='project-boxes'>\r\n      {colorLoop.map((project) => (\r\n            <div className=\"project-box-wrapper\" key={project.lead_RegNo} onClick={() => navigate(`/student?leadRegNo=${project.lead_RegNo}`)}>\r\n              <div className=\"project-box\" style={{ backgroundColor: project.backgroundColor }}>\r\n                    <div className=\"project-box-header\">\r\n                      <span>{currentDate}</span>\r\n                      <div className=\"more-wrapper\">\r\n                      <button className=\"project-btn-more\">\r\n              <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" className=\"feather feather-more-vertical\">\r\n                <circle cx=\"12\" cy=\"12\" r=\"1\" />\r\n                <circle cx=\"12\" cy=\"5\" r=\"1\" />\r\n                <circle cx=\"12\" cy=\"19\" r=\"1\" /></svg>\r\n            </button>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"project-box-content-header\">\r\n                      <p className=\"box-content-header\">{project.Title}</p>\r\n                    </div>\r\n                    <div className=\"box-progress-wrapper\">\r\n                      <p className=\"box-progress-header\">Progress</p>\r\n                      <div className=\"box-progress-bar\">\r\n                        <span\r\n                          className=\"box-progress\"\r\n                          style={{ width: `${Math.round(project.Review)}%`, backgroundColor: project.textColor }}\r\n                        ></span>\r\n                      </div>\r\n                      <p className=\"box-progress-percentage\">{Math.round(project.Review)}%</p>\r\n                    </div>\r\n                    <div className=\"project-box-footer\">\r\n                      <div className=\"participants\">\r\n                      <p className=\"box-content-subheader\">{project.Project_Guide}</p>\r\n                      </div>\r\n                      <div className=\"days-left\" style={{color: project.textColor }}>\r\n                        {project.Batch_No}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n\r\n\r\n\r\n  </div>\r\n</div>{/*\r\n<Message/>\r\n*/}\r\n</div>\r\n</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Admin\r\n","D:\\Project-MGMT-master\\src\\Signup\\Signin.js",[],["140","141"],"D:\\Project-MGMT-master\\src\\StudentModule\\Main.js",["142"],[],"import React, { useEffect, useState } from 'react'\r\nimport './main.css'\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nfunction Main() {\r\n    const navigate = useNavigate();\r\n    const isauthorized = localStorage.getItem(\"isauthorized\");\r\n    const [progress, setProgress] = useState(0);\r\n    const [projectData, setProjectData] = useState([]);\r\n    const location = useLocation();\r\n    const leadRegNo = new URLSearchParams(location.search).get('leadRegNo');\r\n    const [memberName, setMemberName] = useState('');\r\n  const [memberRegNo, setMemberRegNo] = useState('');\r\n    const [teamList, setTeamList] = useState([])\r\n    const [leadName, setLeadName] = useState('')\r\n    const [isAddingMember, setIsAddingMember] = useState(false);\r\n    const [checkedRowCount, setCheckedRowCount] = useState(0);\r\n    const [perLedRegno, setPerLeadRegNo] = useState('');\r\n    const [lastRowNumber, setLastRowNumber] = useState(0);\r\n    const [permanentLeadRegNo, setpermenentLeadRegNo] = useState('')\r\n\r\n    const [tableData, setTableData] = useState([\r\n      // Add more rows as needed\r\n    ]);\r\n    const [newRow, setNewRow] = useState({ date: '', workCompleted: '', workToBeCompleted: '' });\r\n    const [addingNewRow, setAddingNewRow] = useState(false);\r\n\r\n    useEffect(() => {\r\n      let selectedLeadRegNo = leadRegNo;\r\n        console.log(selectedLeadRegNo)\r\n\r\n        if (selectedLeadRegNo === null || selectedLeadRegNo === undefined) {\r\n          const storedUserInfo = JSON.parse(localStorage.getItem('userInfo'));\r\n          const userIdFromLocalStorage = storedUserInfo.User_Id\r\n          console.log(userIdFromLocalStorage);\r\n          if (userIdFromLocalStorage) {\r\n            // Use User_Id from local storage if it exists\r\n            selectedLeadRegNo = userIdFromLocalStorage;\r\n          }\r\n        }\r\n        console.log('value',selectedLeadRegNo);\r\n        setpermenentLeadRegNo(selectedLeadRegNo)\r\n    },[]);\r\n  \r\n    const handleAddRow = () => {\r\n      setAddingNewRow(true);\r\n    };\r\n  \r\n    const handleSaveNewRow = () => {\r\n      // Check if all fields in the new row are filled\r\n      if (newRow.date === '' || newRow.workCompleted === '' || newRow.workToBeCompleted === '') {\r\n        alert(\"Please fill in all fields before saving.\");\r\n        return;\r\n      }\r\n      let selectedLeadRegNo = leadRegNo;\r\n        console.log(selectedLeadRegNo)\r\n\r\n        if (selectedLeadRegNo === null || selectedLeadRegNo === undefined) {\r\n          const storedUserInfo = JSON.parse(localStorage.getItem('userInfo'));\r\n          const userIdFromLocalStorage = storedUserInfo.User_Id\r\n          console.log(userIdFromLocalStorage);\r\n          if (userIdFromLocalStorage) {\r\n            // Use User_Id from local storage if it exists\r\n            selectedLeadRegNo = userIdFromLocalStorage;\r\n          }\r\n        }\r\n        console.log('value',selectedLeadRegNo);\r\n        setPerLeadRegNo(selectedLeadRegNo)\r\n    \r\n      // Create an object with the new row data\r\n      const nextSerialNumber = tableData.length + 1;\r\n      const newRowData = {\r\n        Row_No: nextSerialNumber, \r\n        LeadReg_No: selectedLeadRegNo,\r\n        Staff_Incharge: projectData.Project_Guide,\r\n        Date_Of_Meeting: newRow.date,\r\n        Work_Completed: newRow.workCompleted,\r\n        Work_To_Be_Completed: newRow.workToBeCompleted,\r\n      };\r\n    console.log(newRowData)\r\n    console.log(\"above is for checking\")\r\n      // Perform the Axios POST request to send data to the backend\r\n      axios\r\n        .post('http://localhost:8000/projectstatus/addnewrow/', newRowData)\r\n        .then((response) => {\r\n          console.log('New row added successfully:', response.data);\r\n          setLastRowNumber(lastRowNumber+1)\r\n          console.log(\"updatedRow\")\r\n          console.log(lastRowNumber+1)\r\n    \r\n          // Assuming the backend returns the updated data, update the tableData state\r\n          setTableData((prevData) => [...prevData, { ...newRowData, id: prevData.length + 1 }]);\r\n    \r\n          // Reset the newRow state\r\n          setNewRow({ date: '', workCompleted: '', workToBeCompleted: '' });\r\n    \r\n          // Close the new row input section\r\n          setAddingNewRow(false);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error adding new row:', error);\r\n        });\r\n    };\r\n  \r\n    const handleInputChange = (e) => {\r\n      const { name, value } = e.target;\r\n      setNewRow({ ...newRow, [name]: value });\r\n    };\r\n  \r\n    useEffect(() => {\r\n      // Call the function to fetch table data when the component mounts or when leadRegNo changes\r\n      let selectedLeadRegNo = leadRegNo;\r\n        console.log(selectedLeadRegNo)\r\n\r\n        if (selectedLeadRegNo === null || selectedLeadRegNo === undefined) {\r\n          const storedUserInfo = JSON.parse(localStorage.getItem('userInfo'));\r\n          const userIdFromLocalStorage = storedUserInfo.User_Id\r\n          console.log(userIdFromLocalStorage);\r\n          if (userIdFromLocalStorage) {\r\n            // Use User_Id from local storage if it exists\r\n            selectedLeadRegNo = userIdFromLocalStorage;\r\n          }\r\n        }\r\n        console.log('value',selectedLeadRegNo);\r\n        setPerLeadRegNo(selectedLeadRegNo)\r\n      \r\n        // Now, you have the selected value for leadRegNo\r\n        const data = {\r\n          Lead_Regno : selectedLeadRegNo,\r\n        };\r\n  \r\n      axios.post('http://localhost:8000/projectstatus/get/', data)\r\n        .then((response) => {\r\n          setTableData(response.data);\r\n          console.log(response.data)\r\n          setLastRowNumber(response.data.length);\r\n          setCheckedRowCount(response.data.filter(row => row.Review).length);\r\n          console.log(response.data.filter(row => row.Review).length)\r\n          console.log(response.data.length)\r\n          console.log(\"project status\") // Assuming the response contains an array of table data\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error fetching table data:', error);\r\n        });\r\n    }, [leadRegNo]);\r\n\r\n    const handleLogout = (event) => {\r\n        localStorage.setItem(\"isSigned\", \"false\");\r\n        localStorage.setItem(\"isauthorized\", \"\");\r\n        navigate(\"/\");\r\n      };\r\n\r\n      useEffect(() => {\r\n        let selectedLeadRegNo = leadRegNo;\r\n        console.log(selectedLeadRegNo)\r\n\r\n        if (selectedLeadRegNo === null || selectedLeadRegNo === undefined) {\r\n          const storedUserInfo = JSON.parse(localStorage.getItem('userInfo'));\r\n          const userIdFromLocalStorage = storedUserInfo.User_Id\r\n          console.log(userIdFromLocalStorage);\r\n          if (userIdFromLocalStorage) {\r\n            // Use User_Id from local storage if it exists\r\n            selectedLeadRegNo = userIdFromLocalStorage;\r\n          }\r\n        }\r\n        console.log('value',selectedLeadRegNo);\r\n        setPerLeadRegNo(selectedLeadRegNo)\r\n      \r\n        // Now, you have the selected value for leadRegNo\r\n        const data = {\r\n          Lead_Regno : selectedLeadRegNo,\r\n        };\r\n        axios.post('http://localhost:8000/team/getlead/',data)\r\n        .then(response => {\r\n            setLeadName(response.data.Lead)\r\n            console.log(response.data)\r\n            console.log('above is new')\r\n            const members = [\r\n              response.data.Member1,\r\n              response.data.Member2,\r\n              response.data.Member3,\r\n            ].filter(member => member !== '');\r\n      \r\n            // Set the filtered members to the teamList variable\r\n            setTeamList(members);\r\n        })\r\n        .catch(error => {\r\n          console.log('Error:',error)\r\n        })\r\n      },[leadRegNo])\r\n\r\n      useEffect(() => {\r\n        let selectedLeadRegNo = leadRegNo;\r\n        console.log(selectedLeadRegNo)\r\n\r\n        if (selectedLeadRegNo === null || selectedLeadRegNo === undefined) {\r\n          const storedUserInfo = JSON.parse(localStorage.getItem('userInfo'));\r\n          const userIdFromLocalStorage = storedUserInfo.User_Id\r\n          console.log(userIdFromLocalStorage);\r\n          if (userIdFromLocalStorage) {\r\n            // Use User_Id from local storage if it exists\r\n            selectedLeadRegNo = userIdFromLocalStorage;\r\n          }\r\n        }\r\n        console.log(selectedLeadRegNo);\r\n        setPerLeadRegNo(selectedLeadRegNo)\r\n      \r\n        // Now, you have the selected value for leadRegNo\r\n        const data = {\r\n          lead_RegNo: selectedLeadRegNo,\r\n        };\r\n       axios.post('http://localhost:8000/allteams/student/', data)\r\n  .then(response => {\r\n    setProjectData(response.data);\r\n    console.log(response.data);\r\n  })\r\n  .catch(error => {\r\n    // Handle errors\r\n    console.error('Error:', error);\r\n  });\r\n      }, [leadRegNo]); \r\n\r\n      const handleMemberName = (e) => {\r\n        setMemberName(e.target.value)\r\n      }\r\n      const handleMemberRegNo = (e) => {\r\n        setMemberRegNo(e.target.value)\r\n      }\r\n\r\n      const closeMemberPopup = () => {\r\n        setIsAddingMember(false);\r\n      };\r\n\r\n      const handleMemberSubmission = () => {\r\n        let selectedLeadRegNo = leadRegNo;\r\n\r\n        if (selectedLeadRegNo === null || selectedLeadRegNo === undefined) {\r\n          const storedUserInfo = JSON.parse(localStorage.getItem('userInfo'));\r\n          const userIdFromLocalStorage = storedUserInfo.User_Id\r\n          if (userIdFromLocalStorage) {\r\n            // Use User_Id from local storage if it exists\r\n            selectedLeadRegNo = userIdFromLocalStorage;\r\n          }\r\n        }\r\n        setPerLeadRegNo(selectedLeadRegNo)\r\n        // Perform axios request to add the new guide\r\n        const data = {\r\n          MemberName: memberName,\r\n          MemberReg_No: memberRegNo,\r\n          LeadRegNo : selectedLeadRegNo,\r\n        }\r\n        axios\r\n          .post('http://localhost:8000/team/adds/', data)\r\n          .then(response => {\r\n            console.log(response.data)\r\n            closeMemberPopup();\r\n            const members = [\r\n              response.data.Member1,\r\n              response.data.Member2,\r\n              response.data.Member3,\r\n            ].filter(member => member !== '');\r\n      \r\n            // Set the filtered members to the teamList variable\r\n            setTeamList(members);\r\n            // You might want to fetch data again to update the projects list\r\n          })\r\n          .catch(error => {\r\n            alert('Error adding member:', error);\r\n            closeMemberPopup();\r\n          });\r\n      };\r\n\r\n\r\n  const addTeamMember = (event) => {\r\n    setIsAddingMember(true);\r\n  };\r\n\r\n  const handleReviewChange = (rowNo) => {\r\n    // Update the review status for the corresponding row in the tableData state\r\n    const updatedTableData = [...tableData];\r\n    const updatedRow = updatedTableData.find((row) => row.Row_No === rowNo);\r\n    let selectedLeadRegNo = leadRegNo;\r\n        console.log(selectedLeadRegNo)\r\n\r\n        if (selectedLeadRegNo === null || selectedLeadRegNo === undefined) {\r\n          const storedUserInfo = JSON.parse(localStorage.getItem('userInfo'));\r\n          const userIdFromLocalStorage = storedUserInfo.User_Id\r\n          console.log(userIdFromLocalStorage);\r\n          if (userIdFromLocalStorage) {\r\n            // Use User_Id from local storage if it exists\r\n            selectedLeadRegNo = userIdFromLocalStorage;\r\n          }\r\n        }\r\n        console.log('value',selectedLeadRegNo);\r\n        setPerLeadRegNo(selectedLeadRegNo)\r\n  \r\n    if (updatedRow) {\r\n      updatedRow.Review = !updatedRow.Review;\r\n      setTableData(updatedTableData);\r\n      const newCheckedRowCount = updatedRow.Review\r\n          ? checkedRowCount + 1\r\n          : checkedRowCount - 1;\r\n  \r\n        setCheckedRowCount(newCheckedRowCount);\r\n  \r\n      // Perform the Axios POST request to send the updated review status to the backend\r\n      const reviewData = {\r\n        lead_RegNo: selectedLeadRegNo,\r\n        Row_No: rowNo,\r\n        Review: updatedRow.Review,\r\n      };\r\n      console.log(reviewData)\r\n  \r\n      axios\r\n        .post('http://localhost:8000/projectstatus/updatereview/', reviewData)\r\n        .then((response) => {\r\n          console.log('Review status updated successfully:', response.data);\r\n        })\r\n        .catch((error) => {\r\n          console.error('Error updating review status:', error);\r\n        });\r\n    }\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    // Calculate progress based on checkedRowCount and lastRowNumber\r\n    const newProgress = lastRowNumber !== 0 ? (checkedRowCount / lastRowNumber) * 100 : 0;\r\n\r\n    // Update the progress state\r\n    setProgress(newProgress);\r\n\r\n    const selectedLeadRegNo = permanentLeadRegNo;\r\n    const data = {\r\n      lead_RegNo: selectedLeadRegNo,\r\n      Progress: newProgress,\r\n\r\n    } // Assuming perLedRegno is the lead registration number\r\n\r\n    // Perform the Axios POST request to send the updated progress value to the backend\r\n    axios.post('http://localhost:8000/allteams/progress', data)\r\n      .then((response) => {\r\n        console.log('Progress value updated successfully:', response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error updating progress value:', error);\r\n      });\r\n  }, [checkedRowCount, lastRowNumber, permanentLeadRegNo, setProgress]);\r\n\r\n      \r\n  return (\r\n    <div>\r\n       <nav class=\"navbar navbar-expand-lg navbar-dark\" id=\"navi\">\r\n        <div class=\"container-fluid\">\r\n          <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li class=\"nav-link\">\r\n                <label id='h4'>Student Profile</label>\r\n              </li>\r\n            </ul>\r\n              <form class=\"d-flex\">\r\n                <button class=\"custom-btn btn-3\" value=\"Log Out\" onClick={handleLogout}><span>Log Out</span></button>\r\n              </form>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n      \r\n      <div id='cen'>\r\n        <h1><i><b>{projectData.Title}</b></i></h1>\r\n      </div>\r\n      <div className='row' id='cen2'>\r\n        <div className='col'>\r\n          <div className='row'>\r\n            <div className='col d-flex flex-row-reverse'>\r\n              <h5>Project Guide:</h5>\r\n            </div>\r\n            <div className='col d-flex flex-row'>\r\n              <li id='i1'>{projectData.Project_Guide}</li>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"container\" className='col'>\r\n        <input type=\"radio\" class=\"radio\" name=\"progress\" value=\"twentyfive\" id=\"twentyfive\"/>\r\n        <input type=\"radio\" class=\"radio\" name=\"progress\" value=\"fifty\" id=\"fifty\"/>\r\n        <input type=\"radio\" class=\"radio\" name=\"progress\" value=\"seventyfive\" id=\"seventyfive\"/>\r\n        <input type=\"radio\" class=\"radio\" name=\"progress\" value=\"onehundred\" id=\"onehundred\"/>\r\n        <div class=\"progress\">\r\n          <div class=\"progress-bar progress-bar-striped progress-bar-animated\" aria-valuemin=\"0\" aria-valuemax=\"100\" style={{ width: `${Math.round(progress)}%` }}>{Math.round(progress)}%</div>\r\n          </div>\r\n        </div>\r\n        <div className='col'>\r\n          <div className='row'>\r\n        <div className='col d-flex flex-row-reverse'>\r\n          <h5>Team Member:</h5>\r\n        </div>\r\n        <div className='col d-flex flex-row'>\r\n          <ol>\r\n            <li><label>{leadName}-{perLedRegno}</label>\r\n            <button className=\"add-btn\" title=\"New Member\" value=\"New Menber\" onClick={addTeamMember}>\r\n      <img\r\n          src={process.env.PUBLIC_URL + '/add.png'}\r\n          alt=\"External Icon\"\r\n          width=\"22\"\r\n          height=\"22\"\r\n        />\r\n      </button>\r\n      {isAddingMember && (\r\n        <div className=\"guide-popup\">\r\n          <div className=\"guide-popup-content\">\r\n            <h2>Add a New Team Member</h2>\r\n            <form>\r\n            <div className=\"form-group row\">\r\n    <label htmlFor=\"inputPassword\" className=\"col-sm-2 col-form-label\">Name</label>\r\n    <div className=\"col-sm-10\">\r\n      <input type=\"text\" value={memberName} className=\"form-control\" onChange={handleMemberName} id=\"inputPassword\" placeholder=\"Name\"/>\r\n    </div>\r\n  </div>\r\n  <div className=\"form-group row\">\r\n    <label htmlFor=\"inputPassword\" className=\"col-sm-2 col-form-label\">RegNo</label>\r\n    <div className=\"col-sm-10\">\r\n      <input type=\"text\" value={memberRegNo} className=\"form-control\" id=\"inputPassword\" onChange={handleMemberRegNo} placeholder=\"RegNo\"/>\r\n    </div>\r\n  </div>\r\n  <button type=\"button\" className=\"btn btn-primary\" onClick={handleMemberSubmission}>Add</button>\r\n<button type=\"button\" className=\"btn btn-primary\" onClick={closeMemberPopup}>Cancel</button>\r\n</form>\r\n\r\n          </div>\r\n        </div>\r\n      )}</li>\r\n            {teamList.map((member, index) => (\r\n      <li key={index}>\r\n        {member}\r\n      </li>\r\n    ))}\r\n          </ol>\r\n        </div>\r\n        </div></div>\r\n      </div>\r\n      \r\n<div className='row'>\r\n<div className='col d-flex flex-row '>\r\n  <h5 id='ac' style={{paddingLeft:'103px'}}>Academic Year: 2020-2024</h5>\r\n</div>\r\n<div className='col' style={{paddingLeft:'193px'}}>\r\n  <h5>Batch No: {projectData.Batch_No}</h5>\r\n</div>\r\n\r\n</div>\r\n<div className='status-table'>\r\n<table class=\"table\" id=\"t1\">\r\n  <thead>\r\n    <tr>\r\n      <th scope=\"col\">S.no</th>\r\n      <th scope=\"col\">Date of Meeting</th>\r\n      <th scope=\"col\">Work Completed</th>\r\n      <th scope=\"col\">Work to be completed</th>\r\n      <th scope=\"col\">REVIEW</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n  {tableData.map((row, index) => (\r\n  <tr key={row.Row_No}>\r\n    <td>{index + 1}</td>\r\n    <td>{row.Date_Of_Meeting}</td>\r\n    <td>{row.Work_Completed}</td>\r\n    <td>{row.Work_To_Be_Completed}</td>\r\n    <td>\r\n      <input\r\n        type=\"checkbox\"\r\n        name={`review-${row.Row_No}`}\r\n        checked={row.Review}\r\n        onChange={() => handleReviewChange(row.Row_No)}\r\n        disabled={isauthorized === 'student'} // Pass the Row_No here\r\n      />\r\n    </td>\r\n  </tr>\r\n))}\r\n\r\n  {addingNewRow && (\r\n    <tr>\r\n      <td></td>\r\n      <td>\r\n        <input type=\"text\" name=\"date\" value={newRow.date} onChange={handleInputChange} />\r\n      </td>\r\n      <td>\r\n        <input type=\"text\" name=\"workCompleted\" value={newRow.workCompleted} onChange={handleInputChange} />\r\n      </td>\r\n      <td>\r\n        <input type=\"text\" name=\"workToBeCompleted\" value={newRow.workToBeCompleted} onChange={handleInputChange} />\r\n      </td>\r\n      <td>\r\n        <button className=\"add-row-btn\"  onClick={handleSaveNewRow} >\r\n          Save\r\n        </button>\r\n      </td>\r\n    </tr>\r\n  )}\r\n</tbody>\r\n</table></div>\r\n<button className='add-row-btn' disabled={isauthorized === 'staff'} onClick={handleAddRow}>Add</button>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main\r\n","D:\\Project-MGMT-master\\src\\StudentModule\\Dashboard.js",[],[],"D:\\Project-MGMT-master\\src\\StudentModule\\ProjectDetail.js",[],[],{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","severity":1,"message":"146","line":74,"column":6,"nodeType":"147","endLine":74,"endColumn":8,"suggestions":"148","suppressions":"149"},{"ruleId":"145","severity":1,"message":"150","line":96,"column":6,"nodeType":"147","endLine":96,"endColumn":30,"suggestions":"151","suppressions":"152"},{"ruleId":"145","severity":1,"message":"153","line":122,"column":6,"nodeType":"147","endLine":122,"endColumn":8,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":200,"column":9,"nodeType":"157","endLine":200,"endColumn":62},{"ruleId":"158","severity":1,"message":"159","line":3,"column":8,"nodeType":"160","messageId":"161","endLine":3,"endColumn":17},{"ruleId":"158","severity":1,"message":"162","line":4,"column":8,"nodeType":"160","messageId":"161","endLine":4,"endColumn":21},{"ruleId":"145","severity":1,"message":"153","line":14,"column":6,"nodeType":"147","endLine":14,"endColumn":8,"suggestions":"163"},{"ruleId":"145","severity":1,"message":"164","line":32,"column":6,"nodeType":"147","endLine":32,"endColumn":8,"suggestions":"165"},{"ruleId":"145","severity":1,"message":"166","line":117,"column":6,"nodeType":"147","endLine":117,"endColumn":23,"suggestions":"167"},{"ruleId":"145","severity":1,"message":"153","line":127,"column":6,"nodeType":"147","endLine":127,"endColumn":8,"suggestions":"168"},{"ruleId":"155","severity":1,"message":"156","line":204,"column":9,"nodeType":"157","endLine":204,"endColumn":62},{"ruleId":"145","severity":1,"message":"169","line":44,"column":7,"nodeType":"147","endLine":44,"endColumn":9,"suggestions":"170"},{"ruleId":"145","severity":1,"message":"164","line":32,"column":6,"nodeType":"147","endLine":32,"endColumn":8,"suggestions":"171"},{"ruleId":"145","severity":1,"message":"166","line":117,"column":6,"nodeType":"147","endLine":117,"endColumn":23,"suggestions":"172"},{"ruleId":"145","severity":1,"message":"153","line":127,"column":6,"nodeType":"147","endLine":127,"endColumn":8,"suggestions":"173"},{"ruleId":"155","severity":1,"message":"156","line":204,"column":9,"nodeType":"157","endLine":204,"endColumn":62},{"ruleId":"158","severity":1,"message":"159","line":3,"column":8,"nodeType":"160","messageId":"161","endLine":3,"endColumn":17},{"ruleId":"158","severity":1,"message":"162","line":4,"column":8,"nodeType":"160","messageId":"161","endLine":4,"endColumn":21},{"ruleId":"145","severity":1,"message":"153","line":14,"column":6,"nodeType":"147","endLine":14,"endColumn":8,"suggestions":"174"},{"ruleId":"145","severity":1,"message":"153","line":122,"column":6,"nodeType":"147","endLine":122,"endColumn":8,"suggestions":"175"},{"ruleId":"155","severity":1,"message":"156","line":200,"column":9,"nodeType":"157","endLine":200,"endColumn":62},{"ruleId":"145","severity":1,"message":"146","line":74,"column":6,"nodeType":"147","endLine":74,"endColumn":8,"suggestions":"176","suppressions":"177"},{"ruleId":"145","severity":1,"message":"150","line":96,"column":6,"nodeType":"147","endLine":96,"endColumn":30,"suggestions":"178","suppressions":"179"},{"ruleId":"145","severity":1,"message":"169","line":44,"column":7,"nodeType":"147","endLine":44,"endColumn":9,"suggestions":"180"},"no-new-object",["181"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'navigate' and 'setUserInfo'. Either include them or remove the dependency array.","ArrayExpression",["182"],["183"],"React Hook useEffect has a missing dependency: 'handleNavigation'. Either include it or remove the dependency array.",["184"],["185"],"React Hook useEffect has missing dependencies: 'isauthorized' and 'navigate'. Either include them or remove the dependency array.",["186"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Dashboard' is defined but never used.","Identifier","unusedVar","'ProjectDetail' is defined but never used.",["187"],"React Hook useEffect has a missing dependency: 'userInfo.Name'. Either include it or remove the dependency array.",["188"],"React Hook useEffect has missing dependencies: 'userInfo.Name' and 'userInfo.User_Id'. Either include them or remove the dependency array.",["189"],["190"],"React Hook useEffect has a missing dependency: 'leadRegNo'. Either include it or remove the dependency array.",["191"],["192"],["193"],["194"],["195"],["196"],["197"],["198"],["199"],["200"],["201"],"no-object-constructor",{"desc":"202","fix":"203"},{"kind":"204","justification":"205"},{"desc":"206","fix":"207"},{"kind":"204","justification":"205"},{"desc":"208","fix":"209"},{"desc":"208","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"208","fix":"215"},{"desc":"216","fix":"217"},{"desc":"211","fix":"218"},{"desc":"213","fix":"219"},{"desc":"208","fix":"220"},{"desc":"208","fix":"221"},{"desc":"208","fix":"222"},{"desc":"202","fix":"223"},{"kind":"204","justification":"205"},{"desc":"206","fix":"224"},{"kind":"204","justification":"205"},{"desc":"216","fix":"225"},"Update the dependencies array to be: [navigate, setUserInfo]",{"range":"226","text":"227"},"directive","","Update the dependencies array to be: [handleNavigation, isSigned, isauthorized]",{"range":"228","text":"229"},"Update the dependencies array to be: [isauthorized, navigate]",{"range":"230","text":"231"},{"range":"232","text":"231"},"Update the dependencies array to be: [userInfo.Name]",{"range":"233","text":"234"},"Update the dependencies array to be: [selectedBatchNo, userInfo.Name, userInfo.User_Id]",{"range":"235","text":"236"},{"range":"237","text":"231"},"Update the dependencies array to be: [leadRegNo]",{"range":"238","text":"239"},{"range":"240","text":"234"},{"range":"241","text":"236"},{"range":"242","text":"231"},{"range":"243","text":"231"},{"range":"244","text":"231"},{"range":"245","text":"227"},{"range":"246","text":"229"},{"range":"247","text":"239"},[2552,2554],"[navigate, setUserInfo]",[3049,3073],"[handleNavigation, isSigned, isauthorized]",[3485,3487],"[isauthorized, navigate]",[497,499],[1041,1043],"[userInfo.Name]",[3577,3594],"[selectedBatchNo, userInfo.Name, userInfo.User_Id]",[3793,3795],[1958,1960],"[leadRegNo]",[1041,1043],[3577,3594],[3793,3795],[497,499],[3485,3487],[2552,2554],[3049,3073],[1958,1960]]